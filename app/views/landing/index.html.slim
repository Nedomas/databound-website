.row
  .container
    .fork.text-right
      a.btn.btn-default.btn-sm href='https://github.com/Nedomas/databound' target='_blank'
        span.glyphicon.glyphicon-star
        | Fork on Github

.row
  .col-md-8.col-md-offset-2
    .header
      .logo
      .description.text-center
        span.brand Databound
        span
          |  provides Javascript a simple CRUD API to the Ruby on Rails backend.

.row
  .showoff
    .col-md-6.col-md-offset-1.col-xs-6.col-md-offset-1
      #editor-part
        div role="tabpanel"
          /! Nav tabs
          ul.nav.nav-tabs role="tablist"
            li.active role="presentation"
              a aria-controls="javascript-tab" data-toggle="tab" href="#javascript-tab" role="tab" JavaScript
            li role="presentation"
              a aria-controls="gemfile-tab" data-toggle="tab" href="#gemfile-tab" role="tab" Gemfile
            li role="presentation"
              a aria-controls="routes-tab" data-toggle="tab" href="#routes-tab" role="tab" config/routes.rb
            li role="presentation"
              a aria-controls="routes-tab" data-toggle="tab" href="#controller-tab" role="tab" users_controller.rb
            .run-area.text-right
              button.btn.btn-danger#run
                span.glyphicon.glyphicon-play aria-hidden='true'
                |  Run

          /! Tab panes
          .tab-content
            #javascript-tab.tab-pane.active role="tabpanel"
              .editor#javascript
            #gemfile-tab.tab-pane role="tabpanel"
              .editor#gemfile
            #routes-tab.tab-pane role="tabpanel"
              .editor#routes
            #controller-tab.tab-pane role="tabpanel"
              .editor#controller

    .col-md-1.spacer.no-gutter.col-xs-1
    .col-md-4.col-xs-5
      pre
        #browser

.row
  .content
    .container
      .col-md-10.col-md-offset-1.text-center
        p
          a.btn.btn-danger.install href='#installation'
            | Install Databound

.row.used-by
  .content
    .container
      h2.text-center
        | Used by
      .row
        .col-md-offset-3.col-md-3.text-right.col-xs-offset-1.col-xs-5
          a href='http://www.samesystem.com' target='_blank'
            .samesystem.logo
        .col-md-3.text-left.col-xs-5
          a href='http://spacepicnic.net' target='_blank'
            .spacepicnic.logo

.row.api.dark
  .container
    .row.text-center
      h2 API
    .row.example
      .col-md-offset-1.col-md-3.text-right
        h3 where
      .col-md-5
        pre
          | User.where({ name: 'John' }).then(function(users) {
             print('Users called John');
            });

    .row.example
      .col-md-offset-1.col-md-3.text-right
        h3 find
      .col-md-5
        pre
          | User.find(15).then(function(user) {
             print('User no. 15: ' + user.name);
            });

    .row.example
      .col-md-offset-1.col-md-3.text-right
        h3 findBy
      .col-md-5
        pre
          | User.findBy({ name: 'Peter' }).then(function(user) {
          br
          |  print('Peter from ' + user.city);
          br
          | });

    .row.example
      .col-md-offset-1.col-md-3.text-right
        h3 create
      .col-md-5
        pre
          | User.create({ name: 'Peter' }).then(function(user) {
             print('I am ' + user.name + ' from database');
            });

    .row.example
      .col-md-offset-1.col-md-3.text-right
        h3 update
      .col-md-5
        pre
          | User.update({ id: 15, name: 'Nikki' }).then(function(user) {
              // I'm not Peter anymore, I'm Nikki
              print("I'm not Peter anymore, I'm " + user.name);
            });

    .row.example
      .col-md-offset-1.col-md-3.text-right
        h3 destroy
      .col-md-5
        pre
          | User.destroy(15).then(function(resp) {
              if (resp.success) print('User no. 15 is now gone');
            });

    .row
      .col-md-10.col-md-offset-1.text-center
        a.btn.btn-danger.more-api href='http://nedomas.github.io/databound/src/databound.html' target='_blank'
          | More API docs

.row.features.dark
  .container
    .row.text-center
      h2 Features

    .row.example
      .col-md-offset-2.col-md-3.text-left
        h3#permitted_columns Permitted columns
        p
          | By default no columns are modifiable.
        p
          strong
            | It will raise an error if an unpermitted column is requested.
        p
          | All table columns are allowed if <code>:table_columns</code> is specified.
        p
          | <code>:all</code> can be used with DSL to convert non-existing field into another.
        p
          | ActiveRecord and Mongoid supported.

      .col-md-5
        pre
          | class UsersController < ApplicationController
              include Databound

              private

              def model
                User
              end

              def pemitted_columns
                [:name, :email]
              end
            end

            # if you don't have a controller
            # you can also specify permitted columns in

            # config/routes.rb
            Rails.application.routes.draw do
              databound :users, permitted_columns: [:name, :city]
            end

    .row.example
      .col-md-offset-2.col-md-3.text-left
        h3#permit_update_destroy Permitted scope
        p
          | You can check for the record edit rights.
        p
          strong
            | It will raise an error if <code>permit_update_destroy?</code> block resolves to false.

      .col-md-5
        pre
          | class ProjectsController < ApplicationController
              include Databound

              private

              def model
                Project
              end

              permit_update_destroy? do |project|
                project.user_id == current_user.id
              end
            end

    .row.example
      .col-md-offset-2.col-md-3.text-left
        h3#dsl DSL
        p
          | You can setup <span class='brand'>Databound</span> to treat certain Javascript side input
          |  values as DSL.
        p
          strong
            | <code>strict</code> setting:
        p
          | set <code>false</code> to make both dsl values and other values
          |  valid.
      .col-md-5
        strong Javascript
        pre
          | Project = new Databound('/projects', {
              user_id: 'current'
            });

            Project.create(title: 'Ship').then(function(project) {
              alert('Ship of current user: ' + project.user_id);
            });

        strong app/controllers/projects_controller.rb
        pre
          | class ProjectsController < ApplicationController
              include Databound

              private

              def model
                Project
              end

              dsl(:user_id, :current) do
                current_user.id
              end

              # or

              dsl(:user_id, :current, strict: false) do |params|
                current_user.id
              end
            end

    .row.example
      .col-md-offset-2.col-md-3.text-left
        h3 Scope
        p
          | You can specify <strong>default attributes</strong> that will be
          |  inserted on every query to the backend.
        p
          | It helps to keep the code dry, because most of the time you know some
          |  model attributes when you define a connection.

      .col-md-5
        pre
          | User = new Databound('/users', { city: 'Miami' });

            User.create(name: 'Nikki').then(function(user) {
              // Miami
              print(user.city);
            });

    .row.example
      .col-md-offset-2.col-md-3.text-left
        h3 Extra where scopes
        p
          | You can default connection attribute values if you are constantly repeating them.
        p
          strong
            | They are only used when selecting and not when creating.
      .col-md-5
        pre
          | var User = new Databound('/users',
              { city: 'Miami' },
              { extra_where_scopes: [{ city: 'New york' }] }
            );

            User.create(name: 'Nikki').then(function() {
              // ['Miami', 'New york']
              print(User.takeAll());
            });


.row.security
  .container
    .col-md-offset-2.col-md-8
      .row.text-center
        h2 Security
      .row
        .lead
          p
            strong Which parts can Javascript modify?
          p
            | Specify <a href='#permitted_columns'><code>permitted_columns</code></a>.
          p
            | By default - no columns are modifiable.

          p
            strong How to secure the relation values?
          p
            | You can use <a href='#dsl'><code>dsl(:your_column, :expected_value)</code></a> to only allow certain dsl values
            |  and convert them to relation ids in the backend.

          p
            strong How to protect the scope of the modifiable records?
          p
            | Use <a href='#permit_update_destroy'><code>permit_update_destroy?</code></a> to check permissions.
          p
            strong Which parts can Javascript show?
          p
            | Use <a href='https://github.com/rails-api/active_model_serializers' target='_blank'>Active Model Serializers</a> to serialize the record.

.row.support
  .container
    .col-md-offset-2.col-md-8
      .row.text-center
        h2 Version support and dependencies
      .row
        .lead
          p
            strong Works with:
          p Ruby on Rails <span class="label label-default">3+</span>
          p Ruby <span class="label label-default">2.0+</span>
          p It can work with <strong>Angular</strong> as a better solution over <strong>ngResource</strong>.
          p ActiveRecord or Mongoid
          p Works with <a href='https://github.com/rails-api/active_model_serializers' target='_blank'>Active Model Serializers</a>.
          p Chrome <span class="label label-default">any</span>, Firefox <span class="label label-default">any</span>, Opera <span class="label label-default">any</span>, IE <span class="label label-default">8+</span>

          p
            strong Depends on:
          p
            | Lodash
            small
              em
                |  <span class="label label-default">(should work with any version)</span>

.row.installation#installation
  .container
    .col-md-offset-2.col-md-8
      .row
        h2 Installation
      .row
        #accordion.panel-group aria-multiselectable="true" role="tablist"
          .panel.panel-default
            #headingOne.panel-heading role="tab"
              h4.panel-title
                a aria-controls="collapseOne" aria-expanded="true" data-parent="#accordion" data-toggle="collapse" href="#collapseOne"
                  | With asset pipeline (sprockets)
            #collapseOne.panel-collapse.collapse.in aria-labelledby="headingOne" role="tabpanel"
              .panel-body
                .step
                  h4
                    span.label.label-danger 1
                    span.text  Gemfile
                  pre
                    | gem 'databound', '#{DATABOUND_VERSION}'

                .step
                  h4
                    span.label.label-danger 2
                    span.text  Run generator to add Databound to <code>application.js</code>
                  pre
                    | rails g databound:install

                .step
                  h4
                    span.label.label-danger 3
                    span.text  Add a route to <code>config/routes.rb</code>
                  pre
                    | Rails.application.routes.draw do
                    br
                    |   databound :users
                    br
                    | end

                .step
                  h4
                    span.label.label-danger 4 - optional
                    span.text
                      |  Controller is autogenerated from route
                  p But if you already have a controller, you can include Databound and specify the model yourself.
                  pre
                    | class UsersController < ApplicationController
                        include Databound

                        def model
                          User
                        end

                        def permitted_columns
                          [:name, :city]
                        end
                      end

                .step
                  h4
                    span.label.label-danger 5
                    span.text
                      |  Use it in the Javascript
                  pre
                    | var User = new Databound('/users');

          .panel.panel-default
            #headingTwo.panel-heading role="tab"
              h4.panel-title
                a.collapsed aria-controls="collapseTwo" aria-expanded="false" data-parent="#accordion" data-toggle="collapse" href="#collapseTwo"
                  | Without asset pipeline
            #collapseTwo.panel-collapse.collapse aria-labelledby="headingTwo" role="tabpanel"
              .panel-body
                .step
                  h4
                    span.label.label-danger 1
                    span.text  Gemfile
                  pre
                    | gem 'databound', '#{DATABOUND_VERSION}'

                .step
                  h4
                    span.label.label-danger 2
                    span.text  Download the <a href="#{asset_path('databound.js')}" target='_blank'><code>databound.js</code></a> and load it up
                  pre
                    = "<script src='assets/databound.js'></script>"

                .step
                  h4
                    span.label.label-danger 3
                    span.text  Add a route to <code>config/routes.rb</code>
                  pre
                    | Rails.application.routes.draw do
                    br
                    |   databound :users
                    br
                    | end

                .step
                  h4
                    span.label.label-danger 4 - optional
                    span.text
                      |  Controller is autogenerated from route
                  p But if you already have a controller, you can include Databound and specify the model yourself.
                  pre
                    | class UsersController < ApplicationController
                        include Databound

                        def model
                          User
                        end

                        def permitted_columns
                          [:name, :city]
                        end
                      end

                .step
                  h4
                    span.label.label-danger 5
                    span.text
                      |  Use it in the Javascript
                  pre
                    | var User = new Databound('/users');

          .panel.panel-default
            #headingThree.panel-heading role="tab"
              h4.panel-title
                a.collapsed aria-controls="collapseThree" aria-expanded="false" data-parent="#accordion" data-toggle="collapse" href="#collapseThree"
                  | With require.js
            #collapseThree.panel-collapse.collapse aria-labelledby="headingThree" role="tabpanel"
              .panel-body
                .step
                  h4
                    span.label.label-danger 1
                    span.text  Gemfile
                  pre
                    | gem 'databound', '#{DATABOUND_VERSION}'

                .step
                  h4
                    span.label.label-danger 2
                    span.text  Download Javascript part with <a href='https://www.npmjs.com' target='_blank'><code>npm</code></a> or <a href='http://bower.io' target='_blank'><code>bower</code></a>
                  pre
                    | npm install databound
                  p OR
                  pre
                    | bower install databound

                .step
                  h4
                    span.label.label-danger 3
                    span.text  Add a route to <code>config/routes.rb</code>
                  pre
                    | Rails.application.routes.draw do
                    br
                    |   databound :users
                    br
                    | end

                .step
                  h4
                    span.label.label-danger 4 - optional
                    span.text
                      |  Controller is autogenerated from route
                  p But if you already have a controller, you can include Databound and specify the model yourself.
                  pre
                    | class UsersController < ApplicationController
                        include Databound

                        def model
                          User
                        end

                        def permitted_columns
                          [:name, :city]
                        end
                      end

                .step
                  h4
                    span.label.label-danger 5
                    span.text
                      |  Require and use it in the Javascript
                  pre
                    | var Databound = require('databound');
                    br
                    | var User = new Databound('/users');
